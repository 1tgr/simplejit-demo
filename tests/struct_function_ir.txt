function u0:0(i32 [%23], i64 fp [%21]) -> i32 [%16], i32 [%18], i32 [%17], i64 fp [%21] system_v {
    ss0 = incoming_arg 16, offset -16

                                block0(v0: i32 [%23], v3: i64 [%21]):
[95#50]                             x86_push v3
[20#8089]                           copy_special %20 -> %21
[8#b8]                              v1 = iconst.i32 0
[8#b8]                              v2 = iconst.i32 1
[6#89]                              regmove v1, %16 -> %18
[6#89]                              regmove v0, %23 -> %16
[97#58]                             v4 = x86_pop.i64 
[324#c3]                            return v0, v1, v2, v4
}
function u0:0(i32 [%23], i32 [%22], i32 [%18], i64 fp [%21]) -> i32 [%16], i32 [%18], i32 [%17], i64 fp [%21] system_v {
    ss0 = incoming_arg 16, offset -16

                                block0(v0: i32 [%23], v1: i32 [%22], v2: i32 [%18], v7: i64 [%21]):
[95#50]                             x86_push v7
[20#8089]                           copy_special %20 -> %21
[2#89]                              v6 = copy v2
[166#01]                            v3 = iadd v6, v1
[8#b8]                              v4 = iconst.i32 1
[166#29]                            v5 = isub v0, v4
[6#89]                              regmove v3, %16 -> %17
[6#89]                              regmove v5, %23 -> %16
[97#58]                             v8 = x86_pop.i64 
[324#c3]                            return v5, v2, v3, v8
}
function u0:0(i32 [%23], i64 fp [%21], i64 csr [%19]) -> i32 [%16], i64 fp [%21], i64 csr [%19] system_v {
    ss0 = incoming_arg 24, offset -24
    sig0 = (i32 [%23]) -> i32 [%16], i32 [%18], i32 [%17] system_v
    sig1 = (i32 [%23], i32 [%22], i32 [%18]) -> i32 [%16], i32 [%18], i32 [%17] system_v
    fn0 = colocated u0:0 sig0
    fn1 = colocated u0:1 sig1

                                block0(v0: i32 [%23], v18: i64 [%21], v19: i64 [%19]):
[95#50]                             x86_push v18
[20#8089]                           copy_special %20 -> %21
[95#50]                             x86_push v19
[103#d083]                          adjust_sp_down_imm 8
[8#b8]                              v1 = iconst.i32 0
[198#39]                            v2 = icmp eq v0, v1
[341#74]                            brz v2, block2
[-]                                 fallthrough block1

                                block1:
[8#b8]                              v4 = iconst.i32 0
[6#89]                              regmove v4, %16 -> %17
[325#eb]                            jump block3(v4)

                                block2:
[8#b8]                              v5 = iconst.i32 1
[166#29]                            v6 = isub.i32 v0, v5
[320#e8]                            v7, v8, v9 = call fn0(v6)
[-]                                 fallthrough block4(v7, v8, v9)

                                block4(v10: i32 [%16], v11: i32 [%18], v12: i32 [%17]):
[8#b8]                              v13 = iconst.i32 0
[198#39]                            v14 = icmp ne v10, v13
[341#74]                            brz v14, block3(v12)
[-]                                 fallthrough block5

                                block5:
[6#89]                              regmove.i32 v10, %16 -> %23
[6#89]                              regmove.i32 v11, %18 -> %22
[6#89]                              regmove.i32 v12, %17 -> %18
[320#e8]                            v15, v16, v17 = call fn1(v10, v11, v12)
[325#eb]                            jump block4(v15, v16, v17)

                                block3(v3: i32 [%17]):
[6#89]                              regmove v3, %17 -> %16
[103#8083]                          adjust_sp_up_imm 8
[97#58]                             v21 = x86_pop.i64 
[97#58]                             v20 = x86_pop.i64 
[324#c3]                            return v3, v20, v21
}
